;;; -*- Mode: Lisp; Syntax: COMMON-LISP; Package: jana.java.jimple.conversion; Base: 10 -*- 
;;; -*- coding: utf-8 -*-
;;;****************************************************************************
;;; FILE:        jimple-instructions.lisp
;;; LANGUAGE:    Common-Lisp
;;; 
;;; DESCRIPTION
;;;    Metamodel for the Jimple Intermediate Representation of the Java Language.
;;;    Jimple Instructions.
;;;
;;;    This is a CLOS based implementation of the instructions of
;;;    the Jimple Intermediate Representation of Java Sourcecode 
;;;
;;;NOTE
;;;    Most of these methods could be generated by macros.
;;;    The macro would need to distinguish prefix instructions and infix instructions
;;;    (make-jimple-statement
;;;      (statement-type jimple-statement-1-arg &opt jimple-statement-2-arg))
;;; 
;;; 
;;; Author: Christian Hofmann
;;; 
;;; Created: Sun Aug 31 23:00:42 2008 (z)
;;; 
;;; Last-Updated: Mi Jan  6 18:25:32 2010 (+0100)
;;;           By: Christian Hofmann
;;; 
;;; Copyright (C) 2008-2009, Christian Hofmann. All rights reserved.
;;; 
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without
;;; restriction, including without limitation the rights to use,
;;; copy, modify, merge, publish, distribute, sublicense, and/or
;;; sell copies of the Software, and to permit persons to whom the
;;; Software is furnished to do so, subject to the following
;;; conditions:
;;; 
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;; 
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
;;; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
;;; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
;;; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
;;; OTHER DEALINGS IN THE SOFTWARE.
;;; 
;;;****************************************************************************

(in-package :JANA.JAVA.JIMPLE.CONVERSION)

(defmethod write-jimple-statement ((self jimple-nop-instruction) stream)
  "RETURNS the Jimple-IL representation of a jimple-nop-instruction."
  (declare (type stream stream))
  (write-sequence "nop" stream))

(defmethod write-jimple-statement ((self jimple-breakpoint-instruction) stream)
  "RETURNS the Jimple-IL representation of a jimple-breakpoint-instruction."
  (declare (type stream stream))
  (write-sequence "breakpoint" stream))

(defmethod write-jimple-statement ((self jimple-length-instruction) stream)
  "RETURNS the Jimple-IL representation of a jimple-length-instruction.
This has the form: 'lengthof ' <local-variable>"
  (declare (type stream stream))
  (write-sequence "lengthof " stream)
  (write-jimple-statement (local-variable self) stream))

;; -- assignment

(defmethod write-jimple-statement ((self jimple-imaginary-instruction-assignment) stream)
  "RETURNS the Jimple-IL representation of a
jimple-imaginary-instruction-assignment.
This has the form: <target-form> ' = ' <src-form>"
  (declare (type stream stream))
  (write-jimple-statement (assignment-target self) stream)
  (write-sequence " = " stream)
  (write-jimple-statement (assignment-source self) stream))

(defmethod write-jimple-statement ((self jimple-imaginary-instruction-variable-initialization)
			     stream)
  "RETURNS the Jimple-IL representation of a
jimple-imaginary-instruction-variable-initialization.
This has the form: <target-variable> ' := ' <src-form>"
  (declare (type stream stream))
  (write-jimple-statement (assignment-target self) stream)
  (write-sequence " := " stream)
  (write-jimple-statement (assignment-source self) stream))

;; ---

(defmethod write-jimple-statement ((self jimple-instanceof) stream)
  "RETURNS the Jimple-IL representation of a jimple-instanceof statement.
This has the form: <java-value> ' instanceof ' <java-type>"
  (declare (type stream stream))
  (write-jimple-statement (java-value self) stream)
  (write-sequence " instanceof " stream)
  (write-jimple-statement (java-type self) stream))

(defmethod write-jimple-statement ((self jimple-cast) stream)
  "RETURNS the Jimple-IL representation of a jimple-cast statement.
This has the form: '(' <java-type> ') ' <java-value>"
  (declare (type stream stream))
  (write-char #\( stream)
  (write-jimple-statement (java-type self) stream)
  (write-sequence ") " stream)
  (write-jimple-statement (java-value self) stream))

(defmethod write-jimple-statement ((self jimple-new) stream)
  "RETURNS the Jimple-IL representation of a jimple-new statement.
This has the form: 'new ' <java-type>"
  (declare (type stream stream))
  (write-sequence "new " stream)
  (write-jimple-statement (java-type self) stream))

(defmethod write-jimple-statement ((self jimple-new-array) stream)
  "RETURNS the Jimple-IL representation of a jimple-new-array statement.
This has the form: 'newarray (' <java-type> ')''[' <dimesion-size> ']' or:
                   'newmultiarray (' <java-type> ')'('[' <dimension-size> ']')+('[]')*"
  (declare (type stream stream))
  ;; newarray or newmultiarray instruction
  (if (= 1 (dimensions self))
      (write-sequence "newarray " stream)
      (write-sequence "newmultiarray " stream))
  ;; type
  (write-char #\( stream)
  (write-jimple-statement (java-type self) stream)
  (write-char #\) stream)
  ;; initialized dimensions
  (dolist (dimensions (dimension-size-list self))
    (write-char #\[ stream)
    (write-jimple-statement dimensions stream)
    (write-char #\] stream))
  ;; final parantheses in case of unitialized dimensions
  (dotimes (i (- (dimensions self)
		 (length (dimension-size-list self))))
    (write-sequence "[]" stream)))

;;; ---

(defmethod write-jimple-statement ((self jimple-ccsec-enter-instruction) stream)
  "RETURNS the Jimple-IL representation of a jimple-ccsec-enter-instruction.
This has the form: 'entermonitor ' <java-value>"
  (declare (type stream stream))
  (write-sequence "entermonitor " stream)
  (write-jimple-statement (java-value self) stream))

(defmethod write-jimple-statement ((self jimple-ccsec-exit-instruction) stream)
  "RETURNS the Jimple-IL representation of a jimple-ccsec-exit-instruction.
This has the form: 'exitmonitor ' <java-value>"
  (declare (type stream stream))
  (write-sequence "exitmonitor " stream)
  (write-jimple-statement (java-value self) stream))
